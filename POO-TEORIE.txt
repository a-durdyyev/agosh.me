1.Ce este operatorul de rezoluţie?

Limbajul C++ introduce operatorul de rezoluţie (::), care permite accesul la un obiect (sau

variabilă) dintr-un bloc în care acesta nu este vizibil, datorită unei alte declaraţii.


Exemplu:

int n=1;
void main(void) {
    int n=2;
    afiseaza(n); // afiseaza 2, valoarea variabilei locale n
    afiseaza(::n); // afiseaza 1,valoarea variabilei globale n
  }


2.MOŞTENIRE MULTIPLĂ. EXEMPLU
class Animal {
int varsta; …
};
class Mamifer: public Animal { …
};
class AnimalInaripat: public Animal { …
};
class Liliac: public Mamifer, protected
AnimalInaripat { …
};


3. FUNCŢII PUR VIRTUALE

▫ Sunt funcţii care sunt declarate virtuale, dar nu sunt
implementate în clasa de bază

CLASE ABSTRACTE
• Definiţie
▫ Dacă o clasă conţine o funcţie pur virtuală ea se
numeşte abstractă
• Clasele abstracte nu pot fi instanţiate
• Se pot utiliza pointeri la clasele virtuale
• Utile în cazul polimorfismului


4. Tipuri de referință
Variabile de tip referinţă conţin referiri (adresări indirecte) la variabilele dinamice. Referirea se realizează prin memorarea în variabila referinţă a adresei unde e stocată variabila dinamică. 

Variabilele dinamice ocupă un spaţiu de memorie în corespundere cu tipul lor: Integer, real, string etc.

void IncReferinta(int &i)

{

      i++;

}

int i = 10;

IncReferinta(i);

cout << i;

 

Rezultat: 11

5. n Polimorfismul parametric – mecanismul prin
care putem defini o metodă cu același nume
în aceași clasă, funcții care trebuie să difere
prin numărul și/sau tipul parametrilor. Selecția
funcției se realizează la compilate (legarea
timpurie (early binding)).

6. Functie template 

#include <iostream>
using namespace std;
// sablon cu parametri pentru tipul
// elementelor (T) si dimensiunea vectorului
// (constanta n) pentru calculul sumei
// elemenetelor unui vector
template <class T, int n>
T suma(T vector[])
{
 T suma = 0;
for (int i = 0; i < n; i++)
 suma = suma + vector[i];
return suma;
}
void main()
{
// declaram si initializam doi vectori de
// tipuri si dimensiuni diferite
int v1[] = {1, 5, 7, 9};
double v2[] = {1.3, 5.7, 7.9, 9.11, 11.9};
// folosim functia template suma pentru a genera
// functii de calcul suma pentru cei doi vectori
 cout << "Suma 1 este: " << suma<int, 4>(v1) << endl;
 cout << "Suma 2 este: " << suma<double, 5>(v2) << endl;
} 

Clasele şi funcţiile template sunt şabloane pe baza cărora se pot genera clase şi funcţii
folosind un mecanism de expandare asemănător cu macrodefiniţiile cu parametri.


7. Constructor de copiere 

Constructorii de copiere se apelează în următoarele
cazuri:
n Crearea de obiecte cu iniţializare, pornind de la un
obiect care există (IdClasa ob2=ob1 sau IdClasa ob2(ob1)).
n Apelul unei funcţii care lucrează cu obiecte
transferate prin valoare, când este nevoie de crearea
unei copii a obiectului pe stivă (cazul f(ob);).
n Returnarea dintr-o funcţie a unui obiect prin valoare
(return ob;)

 constructorul implicit (nu are argumente)

8. un operator unar nu poate fi supradefinit ca unul binar sau invers

9. Asociere: stânga dreapta

pointeri la membri unei structuri .* ->*

10. functii friend 

class Punct;
class PoligonConvex{
Punct *varfuri;
int n;
public:
PoligonConvex (int n, Punct v[]);
~PoligonConvex();
void afiseaza();
};
class Punct {
private:
double x, y;
public:
Punct(double x=0, double y=0);
friend void PoligonConvex::afiseaza();
};
Punct::Punct(double x, double y){
this -> x = x;
this -> y = y;
} 

PoligonConvex::PoligonConvex(int n, Punct v[]){
this -> n = n;
varfuri = new Punct[n];
for (int i=0;i<n;i++){
varfuri[i] = v[i];
}
}
PoligonConvex::~PoligonConvex(){
delete []varfuri;
}
void PoligonConvex::afiseaza() {
cout<<"[";
for (int i=0;i<n;i++){
cout<<"("<< varfuri[i].x << ","
<< varfuri[i].y<<")";
}
cout<<"]";
}
int main(){
Punct t[3]={Punct(0,0), Punct(3,0),
Punct(3,4)};
PoligonConvex p(3,t);
p.afiseaza();
} 

11. membrii statici 

 class sir {

                    public : 

                            char *continut;

                            int dim, lung;

                          static char eos;

                         sir (int dm);

                        ~sir( );

                      void copy(sir &s);

                      void print( )

                    };

   Metodele statice se utilizează pentru a sugera faptul că acţionează asupra instanţelor clasei văzute ca un

întreg şi nu asupra instanţelor clasei în mod individual.

12. Constructorul de copiere

class Persoana {
. . .
 Persoana(const Persoana &p){
 nume =
new char[strlen(p.nume)+1];
strcpy(nume, p.nume);
varsta = p.varsta;
cout<<"Apel constructor de
copiere\n";
}
}; 

int main(){
 Persoana p1("Mihai",21);
 Persoana p2=p1;
 p1.afisare();
 p2.afisare();
 p2.setNume("Misu");
 p2.setVarsta(24);
 p1.afisare();
 p2.afisare();
} 
