Date şi funcţii membre statice
DATE MEMBRE STATICE

Datele membre statice sunt date membre ale unei clase ce sunt partajate de toate obiectele.

Spre deosebire de datele membre obişnuite, care există în câte un exemplar pentru fiecare obiect, datele membre statice nu aparţin fiecărui obiect al clasei, ci există într-un singur exemplar comun tuturor obiectelor clasei respective.

Se iniţializează automat cu valoarea 0.

În mod normal, fiecare obiect posedă o copie proprie a variabilelor  instanţiate ale clasei din care provine. Există însă posibilitatea de a defini membri care sunt comuni tuturor obiectelor provenind din aceeaşi clasă.

Când se precedă o declaraţie a unei variabile membru cu static, compilatorului se spune că va exista doar o copie a acelei variabile şi va fi folosită de toate obiectele clasei.

 Spre deosebire de membrii tip date obişnuiţi, nu sunt create copii individuale ale variabilelor membre static pentru fiecare obiect. Nu are importanţă câte obiecte de acel tip de clasă sunt create, va exista doar o singură copie a membrilor date de tip static.

Toate obiectele acelei clase folosesc aceeaşi variabilă.

Datele membre statice

 Se declară în interiorul clasei cu ajutorul cuvântului cheie static:

class IdClasa { … static tip idDataMembStatica; … };

Se definesc în afara clasei

  tip IdClasa::idDataMembStatica = val_initala;

 Referirea datelor membre statice se poate face astfel:

IdClasa::idDataMembStatica // Recomandat

IdObiect.idDataMembStatica

IdPointerObiect->idDataMembStatica

Când se declară o dată membru ca fiind static într-o clasă, nu o definiţi. Cu alte cuvinte, nu se alocă memorie . În schimb, se dă o definire globală a membrilor de date de tip static undeva, în afara clasei.

Aceasta se face redeclarând variabila static folosind operatorul de specificare a domeniului pentru a preciza clasa căreia îi aparţine; ca urmare se va aloca memorie pentru variabilă.

Astfel membri se numesc membri statici şi se vor declara utilizând cuvântul cheie  static.

De exemplu, definind clasa: Sir

 

                  class sir {

                    public : 

                            char *continut;

                            int dim, lung;

                          static char eos;

                         sir (int dm);

                        ~sir( );

                      void copy(sir &s);

                      void print( )

                    };

Fiecare obiect de tip sir posedă propriul vector de octeţi, continut - are o lungime lung, şi o dimensiune proprie- dim ,dar toate obiectele vor avea un acelaşi sfîrşit de şir de caractere, eos, acesta fiind declarat static.

Nu trebuie să confundăm utilizarea cuvântului static pentru membri statici ai unei clase, cu variabile statice.

Declarând un obiect prin

              sir s(80);

Vom putea stabili valoarea lui eos prin

              s.eos=’$’;

sau

              sir :: eos=’$’

A doua metodă este, însă mult mai sugestivă, fiind mult mai clar faptul că acţionăm  asupra tuturor obiectelor având acest tip.

                 class sir {

                       public:

                             static char eos;

                                 . . .

                      };

                  char  sir :: eos=’$’;

 

 Membri statici nu pot fi instanţiaţi în cadrul declarării clasei.

 Ca regulă generală, membrii statici  se vor instanţia  în acelaşi fişier  în care se implementează  metodele clasei, niciodată în cadrul headerului.

 În momentul iniţializării unui membru static, nu se va specifica cuvântul cheie static.

FUNCŢII MEMBRE STATICE

     Metodele statice se utilizează pentru a sugera faptul că acţionează asupra instanţelor clasei văzute ca un

întreg şi nu asupra instanţelor clasei în mod individual. Pot acţiona doar asupra atributelor statice (ale claselor).  Nu pot acţiona asupra atributelor obiectului curent (deoarece nu li se transmite pointerul this).

Nu pot apela decât funcţii membre statice.

Sintaxa declarării/definirii:

   class IdClasa { static tip idMetodaStatica(lista_de_parametri); };

   tip IdClasa::idMetodaStatica(lista_de_parametri) { … }

Utilizare:

   IdClasa::idMetodaStatica(lista_de_parametri); //Recomandat                IdObiect.idMetodaStatica(lista_de_parametri);

   IdPointerObiect->idMetodaStatica (lista_de_parametri);

     Accesul la o astfel de funcţie se realizează în mod identic cu cel către un membru static.

     Funcţiile membre statice se deosebesc de funcţiile membre nestatice prin aceea că nu posedă pointerul this.

     Ca urmare, o funcţie statică membră nu va putea accesa, în mod direct, decât alte elemente  statice ale

 clasei. Singura modalitate ca astfel de funcţii să aibă acces către un membru ordinar al clasei este cea prin care i se transmit, ca parametrii,  obiecte, accesul către membrii vizaţi realizându-se prin intermediul acestora. Cu toate că nu posedă pointerul this, este permis apelul unei funcţii statice dintr-un obiect, la fel cum se realizează accesul către un element static

Exemplu. Accesarea funcţiei statice printr-un obiect.

# include<iostream.h>

    class partajata

       {

            static int a;

     int b;

            public:

            void set(int i, int j){

     a =i;

      b=j;}

          static   void arata();

             

   };

int partajata::a;

void partajata::arata()

     {cout<<"acesta este static a:"<<  a << endl;

      

         };

main()

{

 partajata x,y;

 x.set(1,1);

 y.set(2,2);

 partajata::arata();

 y.arata();


 x.arata();